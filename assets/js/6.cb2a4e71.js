(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{360:function(e,a,s){"use strict";s.r(a);var t=s(11),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[e._v("#")]),e._v(" Commands")]),e._v(" "),s("h2",{attrs:{id:"login"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#login"}},[e._v("#")]),e._v(" login")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker login -u _json_key -p "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" gcr-json-key-file.json"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(" https://gcr.io\n")])])]),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" list")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" -a  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# including stopped")]),e._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" -a -q "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# all processes(containers)' id")]),e._v("\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -a "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# including stopped")]),e._v("\n")])])]),s("h2",{attrs:{id:"rm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[e._v("#")]),e._v(" rm")]),e._v(" "),s("ol",[s("li",[e._v("remove container + image"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker container stop name_or_id\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" name_or_id\ndocker image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" name_or_id\n")])])])]),e._v(" "),s("li",[e._v("remove all containers"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v(" -a -q"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])])]),e._v(" "),s("li",[s("code",[e._v("rm")]),e._v(" vs "),s("code",[e._v("rmi")]),e._v("\nimages size listed in "),s("code",[e._v("docker images")]),e._v(" is cumulated with parent size. If parent is pre-built separately at local machine, remove the image might not release the total size listed. To check actual released size, calculate the difference between the two commands "),s("code",[e._v("docker system df")]),e._v(". To check each layer size, "),s("code",[e._v("docker history <img>")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("rm")]),e._v(" is for container "),s("br"),e._v(" "),s("code",[e._v("rmi")]),e._v(" is for image")])])]),e._v(" "),s("li",[e._v("Remove all dangling(not referring to any tagged images) images. If "),s("code",[e._v("-a")]),e._v(" is specified, will also remove all images not referenced by any container.\n"),s("blockquote",[s("p",[s("code",[e._v("docker image prune")])])])])]),e._v(" "),s("h2",{attrs:{id:"build"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" build")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker build -t tag -f Dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),s("blockquote",[s("p",[s("code",[e._v(".")]),e._v(" project context")])]),e._v(" "),s("h2",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[e._v("#")]),e._v(" tag")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker tag image:v1 image:v2\ndocker push image:v2\n")])])]),s("h2",{attrs:{id:"run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[e._v("#")]),e._v(" run")]),e._v(" "),s("ol",[s("li",[s("p",[s("code",[e._v("run")]),e._v("\nsimple command")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run some_image "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n")])])]),s("ul",[s("li",[s("code",[e._v("ls")]),e._v(": the command to run in the container. After it exits, the container stops.")])]),e._v(" "),s("p",[e._v("interactive command like "),s("code",[e._v("/bin/bash")]),e._v(" or "),s("code",[e._v("python")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -ti some_image /bin/bash\n")])])]),s("ul",[s("li",[s("code",[e._v("-ti")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("-t")]),e._v(" into the container. Interactive commands must have it.")]),e._v(" "),s("li",[s("code",[e._v("-i")]),e._v(" with STDIN pass to the container. Only effective with "),s("code",[e._v("-t")])]),e._v(" "),s("li",[e._v("If only "),s("code",[e._v("-t")]),e._v(", a bash shell is created but user input is not passed to it.")]),e._v(" "),s("li",[e._v("If only "),s("code",[e._v("-i")]),e._v(", no effect")])])]),e._v(" "),s("li",[s("code",[e._v("/bin/bash")]),e._v(": the command to run in the container. After it exits, the container stops.")]),e._v(" "),s("li",[s("code",[e._v("ctrl+p ctl+q")]),e._v(": if "),s("code",[e._v("-ti")]),e._v(", detach the running docker to background. "),s("code",[e._v("docker attach name_of_the_container")]),e._v(" will resume it.")]),e._v(" "),s("li",[s("code",[e._v("ctrl+d")]),e._v(": if "),s("code",[e._v("-ti")]),e._v(", will exist the bash in container, stop the container and come back to the terminal.")])]),e._v(" "),s("p",[e._v("port-forwarding")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8000")]),e._v(":8080 --rm -it --name apple image_tag\n")])])]),s("ul",[s("li",[s("code",[e._v("-p/--publish 8000:8080:")]),e._v(" asks Docker to forward traffic incoming on the host’s port 8000, to the container’s port 8080")]),e._v(" "),s("li",[s("code",[e._v("--rm")]),e._v(": once stopped, removed the containers")]),e._v(" "),s("li",[s("code",[e._v("-t")]),e._v(": into the container")]),e._v(" "),s("li",[s("code",[e._v("-i")]),e._v(": with STDIN")]),e._v(" "),s("li",[s("code",[e._v("--name")]),e._v(": give it a name")])]),e._v(" "),s("blockquote",[s("p",[e._v("Containers are merely an instance of the image you use to run them; "),s("code",[e._v("docker run")]),e._v(" will create a temporary container and execute the command. After command finishes, the container is also stopped")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("exec")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" apple\ndocker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -t -i mycontainer /bin/bash\n")])])]),s("blockquote",[s("p",[e._v("run commands on the "),s("strong",[e._v("running")]),e._v(" container")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("top")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v(" apple\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("top")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v("\n")])])]),s("blockquote",[s("p",[e._v("see processes")])])])]),e._v(" "),s("h2",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[e._v("#")]),e._v(" docker-compose")]),e._v(" "),s("p",[s("code",[e._v("docker-compose start name")]),e._v(": start a service")]),e._v(" "),s("p",[s("code",[e._v("docker-compose up -d name")]),e._v(": start this service and any binding ones")]),e._v(" "),s("p",[s("code",[e._v("docker-compose run --service-ports name [NEW COMMAND]")]),e._v(": start service with new command and with port-forwarding")]),e._v(" "),s("h2",{attrs:{id:"tf-serving"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tf-serving"}},[e._v("#")]),e._v(" tf serving")]),e._v(" "),s("p",[e._v("check serving status: localhost:8501/v1/models/model_name")]),e._v(" "),s("p",[e._v("check serving schema: localhost:8501/v1/models/model_name/metadata")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("way 1")]),e._v(" "),s("p",[e._v("gRPC")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8500")]),e._v(":8500 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n--mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/tmp/mnist,target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/models/mnist "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n-e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MODEL_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("mnist -t tensorflow/serving "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("\n")])])]),s("p",[e._v("rest api")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8501")]),e._v(":8501 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n--mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/tmp/mnist,target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/models/mnist "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n-e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MODEL_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("mnist -t tensorflow/serving "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("\n")])])]),s("p",[e._v("bash parameters:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("&")]),e._v(" as long as the container does not output logs, it will "),s("a",{attrs:{href:"https://unix.stackexchange.com/a/86253",target:"_blank",rel:"noopener noreferrer"}},[e._v("run in the background"),s("OutboundLink")],1),e._v(". Otherwise, the terminal is occupied.\n"),s("ul",[s("li",[s("code",[e._v("jobs")]),e._v(" will list background jobs")]),e._v(" "),s("li",[s("code",[e._v("fg")]),e._v(" will take a background job in the front")]),e._v(" "),s("li",[e._v("use docker parameter "),s("code",[e._v("-d -ti")]),e._v(" is better.")])])])]),e._v(" "),s("p",[e._v("docker parameters:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("--mount type=bind,source=x,target=y")]),e._v(": creates a folder y in the container, and x,y must be absolute paths")]),e._v(" "),s("li",[s("code",[e._v("models/mnist")]),e._v(" contains version folder "),s("code",[e._v("1")])]),e._v(" "),s("li",[s("code",[e._v("-e MODEL_NAME")]),e._v(" must equal target, if no "),s("code",[e._v("-e MODEL_BASE_PATH")])]),e._v(" "),s("li",[s("code",[e._v("-e MODEL_NAME")]),e._v(", equals "),s("code",[e._v("--model_name")]),e._v(", "),s("code",[e._v("--MODEL_NAME")]),e._v(" in tf serving parameters")]),e._v(" "),s("li",[s("code",[e._v("-e TF_CPP_MIN_VLOG_LEVEL=4")]),e._v(" enables verbose logging of tf serving, and it logs continuously thus occupies the terminal even if "),s("code",[e._v("&")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("TF_CPP_MIN_LOG_LEVEL")]),e._v(": controls "),s("code",[e._v("LOG")]),e._v(" with format "),s("code",[e._v("[module] msg")]),e._v("; 0 logs everything, 4 logs nothing")]),e._v(" "),s("li",[s("code",[e._v("TF_CPP_MIN_VLOG_LEVEL")]),e._v(": controls "),s("code",[e._v("VLOB")]),e._v(" with format "),s("code",[e._v("[time level file] msg")]),e._v("; extra info per allowed "),s("code",[e._v("LOG")]),e._v(" level; 0 logs nothing, 4 logs everything")]),e._v(" "),s("li",[s("code",[e._v("TF_CPP_MIN_VLOG_LEVEL")]),e._v(" has been renamed to "),s("code",[e._v("TF_CPP_MAX_VLOG_LEVEL")]),e._v(" after 2.5.0rc0")])])]),e._v(" "),s("li",[s("code",[e._v("-e TF_FORCE_GPU_ALLOW_GROWTH=true")]),e._v(": occupies gpu mem step by step")]),e._v(" "),s("li",[s("code",[e._v("--gpus '\"device=2\"'")]),e._v(" (requires nvidia-docker and docker >= 19.03, for lower version of docker, use "),s("code",[e._v("--runtime=nvidia")]),e._v(")")])]),e._v(" "),s("p",[e._v("tf serving parameters, must adds after image name:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("--enable_batching")]),e._v(": adds after image name to batch the requests")])])]),e._v(" "),s("li",[s("p",[e._v("way 2")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TESTDATA")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('/models/model_name/"')]),e._v("\n\ndocker run -t --rm -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8501")]),e._v(":8501 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n-v "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TESTDATA")]),e._v(':/models/keras_dpr_model"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n-e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MODEL_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("keras_dpr_model "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\ntensorflow/serving "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("\n")])])]),s("ul",[s("li",[s("code",[e._v("-v")]),e._v(": creates a folder in the container")])])]),e._v(" "),s("li",[s("p",[e._v("way 3")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker run -d --name serving_base tensorflow/serving\n\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" /tmp/resnet serving_base:/models/resnet\n\ndocker commit --change "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ENV MODEL_NAME resnet"')]),e._v(" serving_base "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("/new_image\n\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("kill")]),e._v(" serving_base\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" serving_base\n\ndocker run -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8500")]),e._v(":8500 -t "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("/new_image "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("\n")])])]),s("ul",[s("li",[s("code",[e._v("-d")]),e._v(": detach")])])])]),e._v(" "),s("h2",{attrs:{id:"tg-bot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tg-bot"}},[e._v("#")]),e._v(" tg bot")]),e._v(" "),s("p",[e._v("In google cloud:")]),e._v(" "),s("ul",[s("li",[e._v("Update environment variables in "),s("code",[e._v(".env")]),e._v(" and "),s("code",[e._v("run.sh")])]),e._v(" "),s("li",[e._v("If session expired: "),s("code",[e._v("python main.py")])]),e._v(" "),s("li",[s("code",[e._v("sudo sysctl -w vm.max_map_count=262144")]),e._v(" for elastic search to work")]),e._v(" "),s("li",[s("code",[e._v("sudo docker-compose up -d")]),e._v(" to start")]),e._v(" "),s("li",[e._v("To index history messages: "),s("code",[e._v("/download_history")])]),e._v(" "),s("li",[s("code",[e._v("sudo docker-compose down")]),e._v(" to stop")])])])}),[],!1,null,null,null);a.default=n.exports}}]);